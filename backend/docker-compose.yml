# ===================================================================
# Optimierte docker-compose.yml für Render.com & lokale Entwicklung
# ===================================================================
# HINWEIS: Die 'version'-Angabe ist veraltet und wurde entfernt.

# Definiert wiederverwendbare Konfigurationen
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  # -------------------- Datenbank-Service --------------------
  db:
    image: postgres:15-alpine
    container_name: zeiterfassung_db
    # Lädt sensible Daten aus der .env-Datei, anstatt sie hier festzuschreiben.
    # Auf Render.com werden diese Variablen im "Environment"-Tab gesetzt.
    env_file:
      - .env
    volumes:
      # Stellt sicher, dass Ihre Datenbankdaten auch nach einem Neustart erhalten bleiben.
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      # Überprüft, ob die Datenbank bereit ist, Verbindungen anzunehmen.
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging
    restart: unless-stopped

  # -------------------- Applikations-Service --------------------
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        # Gibt an, dass dies eine Produktionsumgebung ist.
        - ENVIRONMENT=production
    container_name: zeiterfassung_app
    # Lädt ebenfalls sensible Daten und Konfigurationen aus der .env-Datei.
    env_file:
      - .env
    ports:
      # Mappt den Port 8000 des Containers auf den Port 8000 Ihres lokalen Rechners.
      # Render.com weist den Port automatisch zu.
      - "8000:8000"
    depends_on:
      db:
        # Stellt sicher, dass die App erst startet, wenn die Datenbank bereit ist.
        condition: service_healthy
    healthcheck:
      # Überprüft, ob Ihre FastAPI-Anwendung korrekt läuft.
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    restart: unless-stopped

# -------------------- Netzwerke & Volumes --------------------
# Docker Compose erstellt automatisch ein Standard-Netzwerk für diese Dienste.
# Explizite Netzwerkdefinitionen sind für dieses einfache Setup nicht notwendig.

volumes:
  postgres_data:
    driver: local
